{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "bgiL_yKL3lDK"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "97f335734d7422c1790629940a208554",
     "grade": false,
     "grade_id": "cell-06a28f034c84a96d",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "This is programming assignment for week 4. In this assignment you will be solving classification task and performing exploratory data analysis. \n",
    "\n",
    "### Grading\n",
    "The assignment contains both automatically graded and peer reviewed tasks. \n",
    "\n",
    "**Automatic grading**\n",
    "After you finish solving all the tasks restart the kernel (`kernel -> restart`) and and click button `Validate` to check that everything works as expected. Afterwards, you can submit your work.\n",
    "\n",
    "**Peer Review**\n",
    "Some of the tasks cannot be checked automatically,  therefore, we'll be using peer review. Please, download this notebook with solutions (`File → Download as → Notebook (.ipynb)`) and submit it for peer review. Each peer reviewed task contains grading instructions. \n",
    "\n",
    "\n",
    "# Table of Contents:\n",
    "* [Part1.](#part1) EDA and Feature Engineering\n",
    "    - [Explore the Target Variable](#target)\n",
    "    - [Categorical Features](#cat_features)\n",
    "        - [Task 1](#task1) [2 pts]\n",
    "        - [Task 2](#task2) [1 pt]\n",
    "        - [Task 3](#task3) [1 pt]\n",
    "        - [Task 4](#task4) [1 pt]\n",
    "        - [Task 5](#task5) [peer review]\n",
    "    - [Ordinal and numeric features](#rest_features)\n",
    "        - [Task 6](#task6) [peer review]\n",
    "        - [Task 7](#task7) [1 pt]\n",
    "        - [Task 8](#task8) [peer review]\n",
    "        - [Task 9](#task9) [1 pt]\n",
    "    - [Missing values](#na)\n",
    "        - [Task 10](#task10) [1 pt]\n",
    "        - [Task 11](#task11) [2 pts]\n",
    "    - [Columns transformers](#columns)\n",
    "        - [Task 12](#task12) [2 pts]\n",
    "    - [Train-test split](#train_test)\n",
    "* [Part2](#part2). Training, comparing and testing models\n",
    "    - [Task 13](#task13) [1 pt]\n",
    "    - [Task 14](#task14) [1 pt]\n",
    "    - [Task 15](#task15) [2 pts]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "deletable": false,
    "editable": false,
    "id": "GMf9yLqu-N-N",
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "267fed599d5d6c7c31967dc335741cb1",
     "grade": false,
     "grade_id": "cell-af93d1d8ec998e33",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "# Part 1. Exploratory Data Analysis (EDA) and Feature Engineering <a class=\"anchor\" id=\"part1\"></a>\n",
    "\n",
    "\n",
    "### The goal\n",
    "Explore the data, fix NAs, check if there are some mistakes and outliers, preprocess and select relevant features before fitting the model.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "deletable": false,
    "editable": false,
    "id": "Kts8synQs37y",
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "6cd75eb3dc1214b9b8416a4c4f36eeca",
     "grade": false,
     "grade_id": "cell-b3397408a1f2c9ae",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## 0. Explore the dataset and the task\n",
    "\n",
    "Below you can find the dataset, which you will be working with in this assignment. It contains information about the passangers of the Titanic. The target variable that we are going to predict is `Survived`. It is a binary variable which indicates whether a given passenger survived in the Titanic catastroph."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 195
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 744,
     "status": "ok",
     "timestamp": 1588940435271,
     "user": {
      "displayName": "Anna Kuzina",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GiemaXGZADupTQf2gOFyfVMKD8BYzFXipMt2krfaeg=s64",
      "userId": "14976976853760262600"
     },
     "user_tz": -180
    },
    "id": "fzy6pMGbHriu",
    "outputId": "13a5b916-53c8-4950-8c2a-19f488d30f16"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic = pd.read_csv('titanic.csv')\n",
    "titanic.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "deletable": false,
    "editable": false,
    "id": "oB4Yts808Zy0",
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "b157aeb0c038b4409929e8dd3ca57f80",
     "grade": false,
     "grade_id": "cell-2bb77c57b5e35580",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "We have data for Titanic passengers, the goal is to predict the column `Survived`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "deletable": false,
    "editable": false,
    "id": "0J9rbBfC-oXz",
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "86b898f53d69b1308154d7d39644048f",
     "grade": false,
     "grade_id": "cell-43979b891da25a75",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## 1.1 Explore the target <a class=\"anchor\" id=\"target\"></a>\n",
    "\n",
    "To begin with, let us plot the barplot for the traget variable. It is very convenient to use wrapper around `matplotlib` provided by `pandas`. You can read about it [here](https://pandas.pydata.org/pandas-docs/stable/user_guide/cookbook.html#cookbook-plotting)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 70
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 727,
     "status": "ok",
     "timestamp": 1588941164772,
     "user": {
      "displayName": "Anna Kuzina",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GiemaXGZADupTQf2gOFyfVMKD8BYzFXipMt2krfaeg=s64",
      "userId": "14976976853760262600"
     },
     "user_tz": -180
    },
    "id": "KbjWspnu_bjZ",
    "outputId": "0ee65d2c-481c-49c3-e9ea-94de6ded4155"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "titanic.Survived.value_counts().plot(kind='bar')\n",
    "plt.grid()\n",
    "plt.title('Distirbution of the target variable');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "792236382b32831f7995e9759bd5bd5c",
     "grade": false,
     "grade_id": "cell-de2f3f6602aa13a3",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "---\n",
    "## 1.2 Explore categorical features <a class=\"anchor\" id=\"cat_features\"></a>\n",
    "\n",
    "\n",
    "We will start from creating a new feature called `Title`. By the title we mean the name prefix, such as `Mr`, `Miss`, `Dr` etc. It may tell us a lot about age or family status of the passenger even if this information is missing from the dataset. \n",
    "\n",
    "Let us take a look at some of the `Name` values. You can see that for each passenger name is organised as: \n",
    "\n",
    "```\n",
    "Surname, Title. Name\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                              Braund, Mr. Owen Harris\n",
       "1    Cumings, Mrs. John Bradley (Florence Briggs Th...\n",
       "2                               Heikkinen, Miss. Laina\n",
       "3         Futrelle, Mrs. Jacques Heath (Lily May Peel)\n",
       "4                             Allen, Mr. William Henry\n",
       "5                                     Moran, Mr. James\n",
       "6                              McCarthy, Mr. Timothy J\n",
       "7                       Palsson, Master. Gosta Leonard\n",
       "8    Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)\n",
       "9                  Nasser, Mrs. Nicholas (Adele Achem)\n",
       "Name: Name, dtype: object"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic.Name[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "8ee0c245bf2ff2b4b5ddf539825964ce",
     "grade": false,
     "grade_id": "cell-659ab36c0b2d9999",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "---\n",
    "**Task 1** [2 pts] Add a new column `Title` to the `titanic` dataframe. <a class=\"anchor\" id=\"task1\"></a>\n",
    "\n",
    "*Hints:* \n",
    "1. You need to extract part of the string from each value of the `Name` column\n",
    "2. `pandas.Series.str` has wide variaty of vectorized string functions. That is, if you run `titanic.Name.str.useful_function()`, then `useful_function()` will be applied to each element of the column `Name`. Take a look at the [documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.html) for more details and the list of \"useful functions\".\n",
    "3. You'll likelily need to apply regular expressions (but it is also to possible to do the task without it). Do not worry, it is nothing sophisticated. Here is all you need to know:\n",
    " * `[a-zA-Z]` - refers to any letter \n",
    " * `\\.` - refers to the dot\n",
    " * `\\,` - refers to the comma\n",
    " * `+` - means that the element repeats 1 or more times. E.g. `\\.+` means 1 or more dots\n",
    " * `\\s` - refers to any spacing sign \n",
    "4. Extract the title without the dot that goes after it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "dca152e7ab7e2745bd1bd5b1c54c36e4",
     "grade": false,
     "grade_id": "cell-f91f30953488d53c",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# your code here\n",
    "titanic['Title'] = titanic.Name.str.extract(r'\\,\\s([a-zA-Z]+)\\.?\\s')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "1d1eec05257beb7b11ce3302b05d164b",
     "grade": true,
     "grade_id": "cell-4067a2abcca23a51",
     "locked": true,
     "points": 2,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mr          517\n",
      "Miss        182\n",
      "Mrs         125\n",
      "Master       40\n",
      "Dr            7\n",
      "Rev           6\n",
      "Mlle          2\n",
      "Col           2\n",
      "Major         2\n",
      "Mme           1\n",
      "Don           1\n",
      "Lady          1\n",
      "Ms            1\n",
      "Capt          1\n",
      "the           1\n",
      "Jonkheer      1\n",
      "Sir           1\n",
      "Name: Title, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(titanic['Title'].value_counts())\n",
    "\n",
    "assert titanic['Title'].value_counts().shape[0] == 17, 'Wrong number of unique titles. 17 is expected'\n",
    "assert titanic['Title'].value_counts().Mr == 517, 'Wrong number of passengers with the Title `Mr`. 517 is expected'\n",
    "assert titanic['Title'].value_counts().Miss == 182, 'Wrong number of passengers with the Title `Miss`. 182 is expected'\n",
    "assert titanic['Title'].value_counts().Dr == 7, 'Wrong number of passengers with the Title `Dr`. 7 is expected'\n",
    "names = ['Newell, Miss. Madeleine', 'Gale, Mr. Shadrach', 'Moubarek, Master. Halim Gonios (\"William George\")']\n",
    "titles = ['Miss', 'Mr', 'Master']\n",
    "for n, t in zip(names, titles):\n",
    "    assert titanic.Title[titanic.Name == n].values == t, 'Wrong title for the passenger {}'.format(n)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "f9c9b83cdaa003df5c3395ef4c022e0d",
     "grade": false,
     "grade_id": "cell-e9206102af974de2",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "<a class=\"anchor\" id=\"task2\"></a>\n",
    "You can see that some titles are very rare, which makes their usefulness questionable. We will now combine all the titles which has 6 or less observations into one category called `Other`.\n",
    "\n",
    "---\n",
    "**Task 2** [1 pt]. Create a vector `proper_titles` which contains all titles with > 6 observations. For all the passengers, who have title not from the `proper_titles` list, rename their `Title` to `Other`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "e606bb420c566178700085b81d9e2df3",
     "grade": false,
     "grade_id": "cell-47b93248f33ead1e",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# your code here\n",
    "proper_titles = titanic[titanic['Title'].map(titanic['Title'].value_counts()) > 6]['Title']\n",
    "titanic.loc[titanic[~titanic.index.isin(proper_titles.index)].index, 'Title'] = 'Other'\n",
    "proper_titles = proper_titles.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "0de2453275696bdb86f7473ccdb3a0cb",
     "grade": true,
     "grade_id": "cell-7198654d5aa00053",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Mr' 'Mrs' 'Miss' 'Master' 'Dr']\n",
      "\n",
      "Mr        517\n",
      "Miss      182\n",
      "Mrs       125\n",
      "Master     40\n",
      "Other      20\n",
      "Dr          7\n",
      "Name: Title, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(proper_titles)\n",
    "print()\n",
    "print(titanic.Title.value_counts())\n",
    "\n",
    "assert titanic.Title.value_counts().shape[0] == 6\n",
    "assert sum(titanic.Title == 'Other') == 20\n",
    "CORRECT_proper_titles = ['Mr', 'Miss', 'Mrs', 'Master', 'Dr']\n",
    "for p in CORRECT_proper_titles:\n",
    "    assert p in proper_titles, 'Title {} is expected to be in the list of proper titles'.format(p)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "deletable": false,
    "editable": false,
    "id": "W-Qq4H5oADeH",
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "b01f130ce357a8c785deb3e9efd973c1",
     "grade": false,
     "grade_id": "cell-ddab173c45e06018",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "---\n",
    "<a class=\"anchor\" id=\"task3\"></a>\n",
    "**Task 3** [1 pt] Obtain the list of all the categorical columns (columns with data type `object`). Name this list `categ_columns`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "deletable": false,
    "executionInfo": {
     "elapsed": 859,
     "status": "ok",
     "timestamp": 1588936163340,
     "user": {
      "displayName": "Anna Kuzina",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GiemaXGZADupTQf2gOFyfVMKD8BYzFXipMt2krfaeg=s64",
      "userId": "14976976853760262600"
     },
     "user_tz": -180
    },
    "id": "7zFhkTUf-neq",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "2ad6243175be4379eaa89bca7c2dc0a1",
     "grade": false,
     "grade_id": "cell-9c53839214569788",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    },
    "outputId": "d30186ab-f6cb-42f6-85ef-738e67b7954c"
   },
   "outputs": [],
   "source": [
    "# your code here\n",
    "categ_columns = titanic.columns[titanic.dtypes == 'object']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "fd61442e9fa2b50971f9a3685f105c68",
     "grade": true,
     "grade_id": "cell-5242f229019f70a9",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Name', 'Sex', 'Ticket', 'Cabin', 'Embarked', 'Title'], dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(categ_columns)\n",
    "\n",
    "assert 'Title' in categ_columns, 'Columns `Title` not in the list'\n",
    "assert 'Name' in categ_columns, 'Columns `Name` not in the list'\n",
    "assert 'Sex' in categ_columns, 'Columns `Sex` not in the list'\n",
    "assert 'Ticket' in categ_columns, 'Columns `Ticket` not in the list'\n",
    "assert 'Cabin' in categ_columns, 'Columns `Cabin` not in the list'\n",
    "assert 'Embarked' in categ_columns, 'Columns `Embarked` not in the list'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "56c2f67551366e0e8c91ac64d42a7a9c",
     "grade": false,
     "grade_id": "cell-d43470d598f11ad2",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "Let us explore these categorical features in more details. We will use method `describe` to obtain some statistics about them. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "85ce8faa49c342101587efc09e623adf",
     "grade": false,
     "grade_id": "cell-061f497fa0776872",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891</td>\n",
       "      <td>891</td>\n",
       "      <td>891</td>\n",
       "      <td>204</td>\n",
       "      <td>889</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>891</td>\n",
       "      <td>2</td>\n",
       "      <td>681</td>\n",
       "      <td>147</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Sirota, Mr. Maurice</td>\n",
       "      <td>male</td>\n",
       "      <td>1601</td>\n",
       "      <td>B96 B98</td>\n",
       "      <td>S</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>577</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>644</td>\n",
       "      <td>517</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Name   Sex Ticket    Cabin Embarked Title\n",
       "count                   891   891    891      204      889   891\n",
       "unique                  891     2    681      147        3     6\n",
       "top     Sirota, Mr. Maurice  male   1601  B96 B98        S    Mr\n",
       "freq                      1   577      7        4      644   517"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic[categ_columns].describe(include='object')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "d5ed9d8c2f7e24c1829ad0fa6bd73f89",
     "grade": false,
     "grade_id": "cell-f56de32d30029803",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "Sometimes, categorical columns contain too many unique values, which do not have a lot of information about the task we are solving. There are cases, when it is possible to extract some useful details from such variables (as we just did with the `Name`). But if you can't it might be better to drop such variable. \n",
    "\n",
    "\n",
    "---\n",
    "<a class=\"anchor\" id=\"task4\"></a>\n",
    "**Task 4** [1 pt] Remove all the categorical features, which have more than 100 unique values. \n",
    "\n",
    "P.S. Remove the corresponding columns from the dataframe `titanic` and unpdate list of categorical feature `categ_columns` to contain only categorical features that are left. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "79cdfa052d730a6c1afc304e37b27a8a",
     "grade": false,
     "grade_id": "cell-2d21a7cb77daf9b6",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# your code here\n",
    "uniq_desc = titanic[categ_columns].describe(include='object')\n",
    "uniq_desc = uniq_desc[uniq_desc.index == 'unique']\n",
    "\n",
    "to_remove = uniq_desc[uniq_desc > 100].any()\n",
    "to_remove = to_remove[to_remove == True].index\n",
    "\n",
    "categ_columns = categ_columns.drop(to_remove)\n",
    "titanic = titanic.drop(columns=to_remove)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "9aa1ab5b820e3cfebe143e927e19d2fc",
     "grade": true,
     "grade_id": "cell-71c524a3b5756bce",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Sex', 'Embarked', 'Title'], dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(categ_columns)\n",
    "\n",
    "titanic[categ_columns].head()\n",
    "\n",
    "CORRECT_categ = set(['Sex', 'Embarked', 'Title'])\n",
    "diff = list(CORRECT_categ - set(categ_columns))\n",
    "assert len(diff) == 0, '`categ_columns` is missing columns'\n",
    "diff = list(set(categ_columns) - CORRECT_categ)\n",
    "assert len(diff) == 0, '`categ_columns` has too amny columns'   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "17a50fabbe239e380ffeee2b17548a6b",
     "grade": false,
     "grade_id": "cell-8351e787208feef7",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "Let's consider distribution of all the categorical features now\n",
    "\n",
    "---\n",
    "<a class=\"anchor\" id=\"task5\"></a>\n",
    "**Task 5** [Peer Reviewed] For each categorical feature draw two bar plots side by side. On the first plot, height of the bar should depict number of passengers in each category, while on the second, height of the bar should depict propostion of survived passengers in the category. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "e969d354886b7e90cf3072db5b64aac3",
     "grade": false,
     "grade_id": "cell-090a99b82541ea3f",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# your code here\n",
    "fig, axes = plt.subplots(nrows=3, ncols=2, constrained_layout=True)\n",
    "\n",
    "for index, col in enumerate(categ_columns):\n",
    "    axes[index,0].set_ylabel('number of passengers')\n",
    "    titanic[col].value_counts().plot(kind='bar', ax=axes[index,0], figsize=(12,10), rot=0)\n",
    "    axes[index,0].grid()\n",
    "    col_group = titanic.groupby(col)\n",
    "    col_group_prop = col_group.Survived.agg(np.sum) / col_group.Survived.agg(np.size)\n",
    "    axes[index, 1].set_ylabel('propostion of survived passengers')\n",
    "    col_group_prop.plot(kind='bar', ax=axes[index, 1], figsize=(10,10), rot=0)\n",
    "    axes[index, 1].grid()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "b5d0c0106332fd5c13e38f806e080d6c",
     "grade": false,
     "grade_id": "cell-fae416b5f5ae6408",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "**Peer Review Grading.** Below you can find the correct plots for this task. Please, compare them to the plots produced by the code above. Please, do not pay attention to the order in which graphs are ploted.\n",
    "\n",
    "<img src=\"correct_plot_Embarked.png\" width=600 height=600 />\n",
    "<img src=\"correct_plot_Sex.png\" width=600 height=600 />\n",
    "<img src=\"correct_plot_Title.png\" width=600 height=600 />"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "6b05828e2d3cd65cfffa095482de29be",
     "grade": false,
     "grade_id": "cell-7f0b8ac91af2ffb1",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "---\n",
    "## 1.3 Ordical and Numeric Features <a class=\"anchor\" id=\"rest_features\"></a>\n",
    "\n",
    "Now consider the rest of the dataset. Below you can see the first few observations from all the non-categorical features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "      <td>Miss</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch     Fare  \\\n",
       "0            1         0       3    male  22.0      1      0   7.2500   \n",
       "1            2         1       1  female  38.0      1      0  71.2833   \n",
       "2            3         1       3  female  26.0      0      0   7.9250   \n",
       "3            4         1       1  female  35.0      1      0  53.1000   \n",
       "4            5         0       3    male  35.0      0      0   8.0500   \n",
       "\n",
       "  Embarked Title  \n",
       "0        S    Mr  \n",
       "1        C   Mrs  \n",
       "2        S  Miss  \n",
       "3        S   Mrs  \n",
       "4        S    Mr  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic[[c for c in titanic.columns if c not in categ_columns + ['Survived']]].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "deletable": false,
    "editable": false,
    "id": "S0VBjAXLE8i_",
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "bc89db7e21158ec38c7f358f03acd28a",
     "grade": false,
     "grade_id": "cell-05fd8fc062a95bf9",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "---\n",
    "<a class=\"anchor\" id=\"task6\"></a>\n",
    "**Task 6** [Peer graded] We suggest removing the feature `PassengerID` from the dataset. Please do it below and write your comment on why this is a resonalbe thing to do. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "97fbe9cc58f3e15b94a6b26209a42a81",
     "grade": false,
     "grade_id": "cell-42648579773c6948",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# your code here\n",
    "titanic = titanic.drop(['PassengerId'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "PassengerID doesn't have value for the dataset. Becouse, it's a simple sequence of numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "685334fb067173dbd9a00c4afd15cc03",
     "grade": true,
     "grade_id": "cell-7d561bb892a04130",
     "locked": true,
     "points": 0,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "assert 'PassengerId' not in titanic.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "928ff91f2c10ac22cce88b3c197390d6",
     "grade": false,
     "grade_id": "cell-7f0885ecf3fb9ff9",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "**Peer Review Grading.** Please read the comment above and check the validity of the arguments"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "faa030b4ddd558b778bf33ecde2b1b51",
     "grade": false,
     "grade_id": "cell-ff19344ea51e30dc",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "---\n",
    "Consider two columns: `SibSp` and `Parch`. The first one is responsibel for number of Siblings/Spouses aboard the Titanic for the given passenger. The second one - number of parents/childer aboard the Titanic. Note that we can create one variable `FamilySize` out of these two. \n",
    "\n",
    "<a class=\"anchor\" id=\"task7\"></a>\n",
    "**Task 7** [1 pt] Create a variable `FamilySize` as a total size of the passenger's family aboard. Remove columns `SibSp` and `Parch` from the dataset afterwards. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "ae1c60433e0417b1648277280ddc6140",
     "grade": false,
     "grade_id": "cell-d93f717ddc47d367",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# your code here\n",
    "titanic['FamilySize'] = titanic['SibSp'] + titanic['Parch']\n",
    "titanic = titanic.drop(['SibSp', 'Parch'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "80e28125896108cb13a7d8d9c78cad02",
     "grade": true,
     "grade_id": "cell-1511c808b2ea4da4",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAELCAYAAAAiIMZEAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAAVLklEQVR4nO3df7DddX3n8eeLYDESJUH0bpZQQ9fYLZiRllt0Rne9WaygqLA/mE1X3dBFM7uLWzulXYO7s053zAx2xq7uKDPNFG1abO9ErRJFtDT16mh1QRSNgEiULAY0qMuPRhlq8L1/nC8zx+u5OQdy7j03H56PmTvnez7fz/l+X+fem9f53u/5kVQVkqS2HDfpAJKk8bPcJalBlrskNchyl6QGWe6S1CDLXZIaZLnrSS/JoSS/1C3/aZK3L8I+rk+yZdzblRZy/KQDSEeSZD8wBTzaN/y8qrp3XPuoqlXj2E6StwJvBJ4FPAB8vqr+bbePV4xjH9KoPHLXseDVVbWq72tsxT4u3VH564GXdQ8W08CeyabSk5nlrmNOkjVJPp7k+0nu75bX9a2fS/L2JH/XnXL5WJJnJvlAkoeS3JRkfd/8SvLcAfv5epJX911/SpIfJDlrQKxfBz5VVd8CqKrvVdWOeZne0C1/tcv12FclmenWvajL/UA3b+Zov196crLcdSw6Dng/8BzgF4GHgffMm7OZ3pH0qcA/Ab7Q3eZk4HbgbSPs58+A1/VdfyXw3aq6ZcDcLwL/PsnvJ5lOsmKhjVbVCx77KwT4XeAO4MtJTgWuA97e5fw94MNJnjVCVulnWO46Fny0O5J9IMlHq+qHVfXhqvpxVf09sB146bzbvL+qvlVVDwLXA9+qqr+pqsPAB4FfHWG/1wCvTPKM7vrrgT8fNLGqrgH+C3Ae8BngviTbjrTxJC+hV+SvqaqH6D2QfKKqPlFVP62qG4Av0XtQkR4Xy13HgouqanX3dVGSpyX54yT/N8lDwGeB1fOOlg/2LT884PrQJ1G7c/ufB/51ktXAK4APHGH+B6rqZcBq4D8C/zPJeYPmJjkN2AVsqapvdsPPAS7ueyB7AHgJsHZYVmk+y13HosuBXwZeWFXPAP55N55F2NdOekfUFwNfqKp7ht2gqn5SVR8EvgY8f/76JCuBjwLvqqrr+1Z9B/jzvgey1VV1YlVdOZZ7oicVy13HoqfTO/p+IMnJjHb+/In6KPBrwJvpnYMfKMklSS5I8vQkxyV5BXAm8H8GTH8f8I2q+sN549cAr05yXpIVSZ6aZKb/yWJpVJa7jkXvAlYCP6D3ROYnF2tHVfUw8GHgdOCvjjD1IeCtwN30XuP+h8B/qqrPDZi7GfiX814x88+q6jvAhd12vk/vSP738d+pnoD4n3VIR5bkf9B749Trhk6WlgnfoSodQXfa51J6r5SRjhn+uSctIMkb6Z0aub6qPjvpPNLj4WkZSWqQR+6S1CDLXZIatCyeUD3llFNq/fr1Y9nWj370I0488cSxbGtczDS65ZjLTKMx0+jGlevmm2/+QVUN/uyhqpr419lnn13j8ulPf3ps2xoXM41uOeYy02jMNLpx5QK+VAv0qqdlJKlBlrskNchyl6QGWe6S1CDLXZIaZLlLUoMsd0lqkOUuSQ1aFu9QHdX6bdcNnXP5xsNcMmTe/isvGFckSVqWPHKXpAZZ7pLUIMtdkhpkuUtSgyx3SWqQ5S5JDbLcJalBlrskNchyl6QGWe6S1KCRyj3J/iR7k9yS5Evd2MlJbkhyZ3e5pm/+FUn2JbkjyXmLFV6SNNjjOXLfVFVnVdV0d30bsKeqNgB7uuskOQPYDJwJnA9clWTFGDNLkoY4mtMyFwI7u+WdwEV947NV9UhV3QXsA845iv1Ikh6nVNXwScldwP1AAX9cVTuSPFBVq/vm3F9Va5K8B/hiVV3TjV8NXF9VH5q3za3AVoCpqamzZ2dnh+bYe8+DQ+dMrYSDDx95zsZTTxq6nXE6dOgQq1atWtJ9DrMcM8HyzGWm0ZhpdOPKtWnTppv7zqb8jFE/8vfFVXVvkmcDNyT5xhHmZsDYzz2CVNUOYAfA9PR0zczMDA0x7KN8ofeRv+/ce+S7tf+1w/c1TnNzc4xy/5bScswEyzOXmUZjptEtRa6RTstU1b3d5X3AR+idZjmYZC1Ad3lfN/0AcFrfzdcB944rsCRpuKHlnuTEJE9/bBl4OfB1YDewpZu2Bbi2W94NbE5yQpLTgQ3AjeMOLkla2CinZaaAjyR5bP5fVNUnk9wE7EpyKXA3cDFAVd2aZBdwG3AYuKyqHl2U9JKkgYaWe1V9G3jBgPEfAucucJvtwPajTidJekJ8h6okNchyl6QGWe6S1CDLXZIaZLlLUoMsd0lqkOUuSQ2y3CWpQZa7JDXIcpekBlnuktQgy12SGmS5S1KDLHdJapDlLkkNstwlqUGWuyQ1yHKXpAZZ7pLUIMtdkhpkuUtSgyx3SWqQ5S5JDbLcJalBlrskNchyl6QGWe6S1CDLXZIaZLlLUoNGLvckK5J8JcnHu+snJ7khyZ3d5Zq+uVck2ZfkjiTnLUZwSdLCHs+R+5uB2/uubwP2VNUGYE93nSRnAJuBM4HzgauSrBhPXEnSKEYq9yTrgAuAP+kbvhDY2S3vBC7qG5+tqkeq6i5gH3DOeOJKkkYx6pH7u4D/Cvy0b2yqqr4L0F0+uxs/FfhO37wD3ZgkaYmkqo48IXkV8Mqq+s9JZoDfq6pXJXmgqlb3zbu/qtYkeS/whaq6phu/GvhEVX143na3AlsBpqamzp6dnR0adu89Dw6dM7USDj585DkbTz1p6HbG6dChQ6xatWpJ9znMcswEyzOXmUZjptGNK9emTZturqrpQeuOH+H2LwZek+SVwFOBZyS5BjiYZG1VfTfJWuC+bv4B4LS+268D7p2/0araAewAmJ6erpmZmaFBLtl23dA5l288zDv3Hvlu7X/t8H2N09zcHKPcv6W0HDPB8sxlptGYaXRLkWvoaZmquqKq1lXVenpPlP5tVb0O2A1s6aZtAa7tlncDm5OckOR0YANw49iTS5IWNMqR+0KuBHYluRS4G7gYoKpuTbILuA04DFxWVY8edVJJ0sgeV7lX1Rww1y3/EDh3gXnbge1HmU2S9AT5DlVJapDlLkkNstwlqUGWuyQ1yHKXpAZZ7pLUIMtdkhpkuUtSgyx3SWqQ5S5JDbLcJalBlrskNchyl6QGWe6S1CDLXZIaZLlLUoMsd0lqkOUuSQ2y3CWpQZa7JDXIcpekBlnuktQgy12SGmS5S1KDLHdJapDlLkkNstwlqUGWuyQ1yHKXpAZZ7pLUoKHlnuSpSW5M8tUktyb5g2785CQ3JLmzu1zTd5srkuxLckeS8xbzDkiSft4oR+6PAP+iql4AnAWcn+RFwDZgT1VtAPZ010lyBrAZOBM4H7gqyYrFCC9JGmxouVfPoe7qU7qvAi4EdnbjO4GLuuULgdmqeqSq7gL2AeeMNbUk6YhSVcMn9Y68bwaeC7y3qt6S5IGqWt035/6qWpPkPcAXq+qabvxq4Pqq+tC8bW4FtgJMTU2dPTs7OzTH3nseHDpnaiUcfPjIczaeetLQ7YzToUOHWLVq1ZLuc5jlmAmWZy4zjcZMoxtXrk2bNt1cVdOD1h0/ygaq6lHgrCSrgY8kef4RpmfQJgZscwewA2B6erpmZmaG5rhk23VD51y+8TDv3Hvku7X/tcP3NU5zc3OMcv+W0nLMBMszl5lGY6bRLUWux/Vqmap6AJijdy79YJK1AN3lfd20A8BpfTdbB9x71EklSSMb5dUyz+qO2EmyEngZ8A1gN7Clm7YFuLZb3g1sTnJCktOBDcCN4w4uSVrYKKdl1gI7u/PuxwG7qurjSb4A7EpyKXA3cDFAVd2aZBdwG3AYuKw7rSNJWiJDy72qvgb86oDxHwLnLnCb7cD2o04nSXpCfIeqJDXIcpekBlnuktQgy12SGmS5S1KDLHdJapDlLkkNstwlqUGWuyQ1yHKXpAZZ7pLUIMtdkhpkuUtSgyx3SWqQ5S5JDbLcJalBlrskNchyl6QGWe6S1CDLXZIaZLlLUoMsd0lqkOUuSQ2y3CWpQZa7JDXIcpekBlnuktQgy12SGmS5S1KDLHdJatDQck9yWpJPJ7k9ya1J3tyNn5zkhiR3dpdr+m5zRZJ9Se5Ict5i3gFJ0s8b5cj9MHB5Vf0K8CLgsiRnANuAPVW1AdjTXadbtxk4EzgfuCrJisUIL0kabGi5V9V3q+rL3fLfA7cDpwIXAju7aTuBi7rlC4HZqnqkqu4C9gHnjDu4JGlhqarRJyfrgc8CzwfurqrVfevur6o1Sd4DfLGqrunGrwaur6oPzdvWVmArwNTU1Nmzs7ND97/3ngeHzplaCQcfPvKcjaeeNHQ743To0CFWrVq1pPscZjlmguWZy0yjMdPoxpVr06ZNN1fV9KB1x4+6kSSrgA8Dv1NVDyVZcOqAsZ97BKmqHcAOgOnp6ZqZmRma4ZJt1w2dc/nGw7xz75Hv1v7XDt/XOM3NzTHK/VtKyzETLM9cZhqNmUa3FLlGerVMkqfQK/YPVNVfdcMHk6zt1q8F7uvGDwCn9d18HXDveOJKkkYxyqtlAlwN3F5Vf9S3ajewpVveAlzbN745yQlJTgc2ADeOL7IkaZhRTsu8GHg9sDfJLd3YW4ErgV1JLgXuBi4GqKpbk+wCbqP3SpvLqurRsSeXJC1oaLlX1ecYfB4d4NwFbrMd2H4UuSRJR8F3qEpSgyx3SWqQ5S5JDbLcJalBlrskNchyl6QGWe6S1CDLXZIaZLlLUoNG/lRIDbZ+xE+qHPaJlvuvvGBckSTJI3dJapHlLkkNstwlqUGWuyQ1yHKXpAZZ7pLUIMtdkhpkuUtSgyx3SWqQ5S5JDbLcJalBlrskNchyl6QGWe6S1CDLXZIaZLlLUoMsd0lqkOUuSQ2y3CWpQUPLPcn7ktyX5Ot9YycnuSHJnd3lmr51VyTZl+SOJOctVnBJ0sJGOXL/U+D8eWPbgD1VtQHY010nyRnAZuDM7jZXJVkxtrSSpJEMLfeq+izw/+YNXwjs7JZ3Ahf1jc9W1SNVdRewDzhnTFklSSNKVQ2flKwHPl5Vz++uP1BVq/vW319Va5K8B/hiVV3TjV8NXF9VHxqwza3AVoCpqamzZ2dnh+bYe8+DQ+dMrYSDDx95zsZTTxq6nVG1nAnGm2sUhw4dYtWqVUu6z2HMNBozjW5cuTZt2nRzVU0PWnf8UW/9Z2XA2MBHj6raAewAmJ6erpmZmaEbv2TbdUPnXL7xMO/ce+S7tf+1w/c1qpYzwXhzjWJubo5RfheWkplGY6bRLUWuJ/pqmYNJ1gJ0l/d14weA0/rmrQPufeLxJElPxBMt993Alm55C3Bt3/jmJCckOR3YANx4dBElSY/X0L/Lk/wlMAOckuQA8DbgSmBXkkuBu4GLAarq1iS7gNuAw8BlVfXoImWXJC1gaLlX1W8usOrcBeZvB7YfTShJ0tHxHaqS1CDLXZIaZLlLUoMsd0lqkOUuSQ2y3CWpQZa7JDXIcpekBlnuktQgy12SGmS5S1KDLHdJapDlLkkNstwlqUGWuyQ1yHKXpAZZ7pLUIMtdkhpkuUtSgyx3SWqQ5S5JDbLcJalBx086gJ4c1m+7bqR5l288zCVD5u6/8oJxRJKa5pG7JDXIcpekBnlaRlpmRjmF5ekrDeORuyQ1yCN3PWn5JK9aZrlLGspTRcceT8tIUoMW7cg9yfnAu4EVwJ9U1ZWLtS9JWg6W06m+RSn3JCuA9wK/ARwAbkqyu6puW4z9SXryGdepImjzdNFinZY5B9hXVd+uqn8AZoELF2lfkqR5UlXj32jyb4Dzq+oN3fXXAy+sqjf1zdkKbO2u/jJwx5h2fwrwgzFta1zMNLrlmMtMozHT6MaV6zlV9axBKxbrnHsGjP3Mo0hV7QB2jH3HyZeqanrc2z0aZhrdcsxlptGYaXRLkWuxTsscAE7ru74OuHeR9iVJmmexyv0mYEOS05P8ArAZ2L1I+5IkzbMop2Wq6nCSNwGfovdSyPdV1a2Lsa8Bxn6qZwzMNLrlmMtMozHT6BY916I8oSpJmizfoSpJDbLcJalBlrskNeiYL/ck/zTJW5L87yTv7pZ/ZdK5lpvu+3RuklXzxs+fYKZzkvx6t3xGkt9N8spJ5RkkyZ9NOsN8SV7Sfa9ePsEML0zyjG55ZZI/SPKxJO9IctKEMv12ktOGz3xyOKafUE3yFuA36X28wYFueB29l17OLrcPK0vyW1X1/gns97eBy4DbgbOAN1fVtd26L1fVr00g09uAV9B7xdYNwAuBOeBlwKeqavsEMs1/uW6ATcDfAlTVa5Y6E0CSG6vqnG75jfR+lh8BXg58bBK/50luBV7QvTJuB/Bj4EPAud34v5pApgeBHwHfAv4S+GBVfX+pcywbVXXMfgHfBJ4yYPwXgDsnnW9ArrsntN+9wKpueT3wJXoFD/CVCWZaATwNeAh4Rje+EvjahDJ9GbgGmAFe2l1+t1t+6QR/b77St3wT8Kxu+URg74Qy3d7/fZu37pZJfZ/onY14OXA18H3gk8AW4OkT/PmdBFwJfAP4Yfd1eze2erH2e6yflvkp8I8HjK/t1i25JF9b4GsvMDWJTMCKqjoEUFX76ZXWK5L8EYM/KmIpHK6qR6vqx8C3quqhLt/DTOhnB0wDNwP/DXiwquaAh6vqM1X1mQllAjguyZokz6T31/b3AarqR8DhCWX6epLf6pa/mmQaIMnzgJ9MKFNV1U+r6q+r6lJ63XAVcD7w7QllAtgF3A/MVNUzq+qZ9P4ivB/44GLt9Fj/n5h+B9iT5E7gO93YLwLPBd604K0W1xRwHr0fXL8Af7f0cQD4XpKzquoWgKo6lORVwPuAjRPK9A9JntaV+9mPDXbnaydS7lX1U+B/Jflgd3mQ5fFv5CR6DzoBKsk/qqrvdc+fTOrB+Q3Au5P8d3ofgPWFJN+h9+/wDRPK9DPfi6r6Cb13xu9OsnIykQBYX1Xv6B+oqu8B70jyHxZrp8f0OXeAJMfR+4jhU+n9cA8AN1XVoxPKczXw/qr63IB1f1FV/24CmdbRO1L+3oB1L66qz08g0wlV9ciA8VOAtVW1d6kzDchyAfDiqnrrpLMMkuRpwFRV3TXBDE8Hfoneg+CBqjo4wSzPq6pvTmr/C0ny18DfADsf+/4kmQIuAX6jql62KPs91stdkpazJGuAbfT+T4tnd8MH6f1VcWVVzf8rfzz7tdwlaTIW8xV0lrskTUiSu6vqFxdj28vhySJJalaSry20ikV8BZ3lLkmLayKvoLPcJWlxfZzemwhvmb8iydxi7dRz7pLUoGP9HaqSpAEsd0lqkOUuSQ2y3CWpQZa7JDXo/wNCVWgNJ+/nqQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "titanic.FamilySize.value_counts().sort_index().plot(kind='bar')\n",
    "plt.title('Family Size')\n",
    "plt.grid()\n",
    "\n",
    "assert 'SibSp' not in titanic.columns\n",
    "assert 'Parch' not in titanic.columns\n",
    "assert sum(titanic.FamilySize == 0) == 537\n",
    "assert sum(titanic.FamilySize == 10) == 7"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "3698db6988f8d66d5f08a82bdc0bb270",
     "grade": false,
     "grade_id": "cell-f42e8dedc8e82c64",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "---\n",
    "Let us work with the variable `FamilySize` even further. Turns out, that sometimes it is reasonable to convert numerical feature into ordinal ones. E.g. instead of having a family size we can group peopple into `single`, `small_family`, etc. In this manner we can enforce larger distinction between people who do not have family at all and those who have small families. At the same time we can say that for the sake of our application we do not need to distiguish family of size 1 from the family of size 2. \n",
    "\n",
    "<a class=\"anchor\" id=\"task8\"></a>\n",
    "**Task 8** [Peer Graded]. Plot the bar plot for the variable `FamilySize` where the height of the bar is determined by the proportion of the survived passengers. Based on the created plot split all the passengers into tree groups. For each group create a binary variable `FamilySize_1`, `FamilySize_2` and `FamilySize_3`. Justify the split that you've chosen."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "f834da150645a3afdd0f1dda80d20705",
     "grade": false,
     "grade_id": "cell-4d78b5bcd190dec1",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# your code here\n",
    "f = titanic.groupby('FamilySize')\n",
    "f = f.Survived.agg(np.sum) / f.Survived.agg(np.size)\n",
    "f.plot(kind='bar')\n",
    "plt.grid()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "titanic['FamilySize_1'] = np.where(titanic['FamilySize'] == 0, 1, 0)\n",
    "titanic['FamilySize_2'] = np.where((titanic['FamilySize'] > 0) & (titanic['FamilySize'] < 4), 1, 0)\n",
    "titanic['FamilySize_3'] = np.where(titanic['FamilySize'] > 3, 1, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "cc9686a5d8f28b8015cbd17ed030a332",
     "grade": true,
     "grade_id": "cell-a45e239798cb5c68",
     "locked": true,
     "points": 0,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "assert 'FamilySize_1' in titanic.columns\n",
    "assert 'FamilySize_2' in titanic.columns\n",
    "assert 'FamilySize_3' in titanic.columns\n",
    "assert titanic.FamilySize_1.sum() + titanic.FamilySize_2.sum() + titanic.FamilySize_3.sum() == 891\n",
    "assert titanic.FamilySize_1.sum() > 0\n",
    "assert titanic.FamilySize_2.sum() > 0\n",
    "assert titanic.FamilySize_3.sum() > 0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Passengers with 1 , 2 or 3 family members have higher survival, and so this is reason for include them into an individual group."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "cb9eb3433e847752521d1534449c1a21",
     "grade": false,
     "grade_id": "cell-b05e96d8c3045393",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "**Peer Review Grading.** Please check that the plot above is correct (below you can see the correct answer). Also read the comment about the way the passengers were split on the groupd and check that the splitting is reasonable.\n",
    "\n",
    "<img src=\"task8_corrrect.png\" width=400 height=400 />\n",
    "\n",
    "\n",
    "---\n",
    "\n",
    "Basically, we've just converted numerical feature `FamilySize` into categorical one with three categories. Moreover, we've simultaniously performed One-hot encoding of this categorical feature and obtained three binary variables. Now we can drop the feature `FamilySize` as it is not needed anymore."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "titanic.drop(['FamilySize'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "f4cbdab376332b8e811d826aa13a4497",
     "grade": false,
     "grade_id": "cell-f0df55b128f58491",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "---\n",
    "<a class=\"anchor\" id=\"task9\"></a>\n",
    "**Task 9** [1 pt]. We have three features left unexplored. They are `Pclass`, `Age` and `Fare`. The frist one stands for the ticket class, second - for the age of the passenger and the fird one gives us price of the ticket. \n",
    "\n",
    "Please, create `ordinal_cols`, which will be list of all the ordinal columns (put there names of relevant columns) and `numeric_cols` - list with the names of the numeric columns. If there is no ordinal or numeric colums, make the corrisponding list empty."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "9a5e31e9fe9c0f452057525055946085",
     "grade": false,
     "grade_id": "cell-532a4f54cf51bb15",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# your code here\n",
    "ordinal_cols = ['Pclass']\n",
    "numeric_cols = ['Age', 'Fare']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "45b4065159773365d88fe433a4e77bd5",
     "grade": true,
     "grade_id": "cell-ac29edf4d82e0459",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ordinal columns are:  ['Pclass']\n",
      "Numeric columns are:  ['Age', 'Fare']\n"
     ]
    }
   ],
   "source": [
    "print('Ordinal columns are: ', ordinal_cols)\n",
    "print('Numeric columns are: ', numeric_cols)\n",
    "\n",
    "assert len(ordinal_cols) == 1\n",
    "assert len(numeric_cols) == 2\n",
    "assert 'Pclass' in ordinal_cols\n",
    "assert 'Age' in numeric_cols\n",
    "assert 'Fare' in numeric_cols"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "deletable": false,
    "editable": false,
    "id": "xdHkCw7CN-JP",
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "2ac13d3fa5b542a55727decf815e9c91",
     "grade": false,
     "grade_id": "cell-8b443a15975c90a9",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "We can use different plots to explore numerical features. Below you can find some examples with the variable `Age`.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 175
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 615,
     "status": "ok",
     "timestamp": 1588942709565,
     "user": {
      "displayName": "Anna Kuzina",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GiemaXGZADupTQf2gOFyfVMKD8BYzFXipMt2krfaeg=s64",
      "userId": "14976976853760262600"
     },
     "user_tz": -180
    },
    "id": "7fLiaQLSE9z4",
    "outputId": "1b72bbe2-664d-4e7c-cb42-6ed4dd32f16f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "We can use histograms or boxplots to see how numerical features depends on the categorical one.\n",
      "1. Age vs Target\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "2. Age vs Sex\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3. Age vs Target\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Scatter plots are usefull to spot connection between two numeric features.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print()\n",
    "print('We can use histograms or boxplots to see how numerical features depends on the categorical one.')\n",
    "print('1. Age vs Target')\n",
    "titanic.hist(column='Age', by='Survived', bins=20, sharey=True);\n",
    "plt.show();\n",
    "\n",
    "print()\n",
    "print('2. Age vs Sex')\n",
    "titanic.boxplot(column='Age', by='Sex', figsize=(7,5));\n",
    "plt.ylabel('Age');\n",
    "plt.show();\n",
    "\n",
    "print('3. Age vs Target')\n",
    "titanic.boxplot(column='Age', by='Title', figsize=(7,5));\n",
    "plt.ylabel('Age');\n",
    "plt.show();\n",
    "\n",
    "print()\n",
    "print('Scatter plots are usefull to spot connection between two numeric features.')\n",
    "titanic.plot.scatter(x='Age', y='Fare');\n",
    "plt.grid()\n",
    "plt.title('Scatter plot of Age and Fare');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 318
    },
    "colab_type": "code",
    "deletable": false,
    "editable": false,
    "executionInfo": {
     "elapsed": 721,
     "status": "ok",
     "timestamp": 1588943213481,
     "user": {
      "displayName": "Anna Kuzina",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GiemaXGZADupTQf2gOFyfVMKD8BYzFXipMt2krfaeg=s64",
      "userId": "14976976853760262600"
     },
     "user_tz": -180
    },
    "id": "vWgnGSowPLSm",
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "55a06c8b7318f11ecca91ff684d85c96",
     "grade": false,
     "grade_id": "cell-1e34723320a6159f",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    },
    "outputId": "4b5b82cf-0747-44e3-abef-3b7d881eb30f"
   },
   "source": [
    "One reason, why it is usefull to make such plots is that it may help to fill in missing values. Keep it in mind for the next part of this notebook"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "deletable": false,
    "editable": false,
    "id": "e8go58wc8rkp",
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "5997c2e39abd0173a60791dbbcda8c2f",
     "grade": false,
     "grade_id": "cell-9ee4600e50832a6c",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "---\n",
    "## 1.3 working with missing values <a class=\"anchor\" id=\"na\"></a>\n",
    "<a class=\"anchor\" id=\"task10\"></a>\n",
    "**Task 10** [1 pts] Compute proportion of missing values in each column. Store the answer in the variable `prop_missing`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 246
    },
    "colab_type": "code",
    "deletable": false,
    "executionInfo": {
     "elapsed": 948,
     "status": "ok",
     "timestamp": 1588940619885,
     "user": {
      "displayName": "Anna Kuzina",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GiemaXGZADupTQf2gOFyfVMKD8BYzFXipMt2krfaeg=s64",
      "userId": "14976976853760262600"
     },
     "user_tz": -180
    },
    "id": "LtQvp-FSp4hS",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "ee795b3549f5bda94a46f708d3bb4591",
     "grade": false,
     "grade_id": "cell-8c2846899255e3df",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    },
    "outputId": "894e0742-a126-4244-8026-fae110172777"
   },
   "outputs": [],
   "source": [
    "# your code here\n",
    "prop_missing = titanic.isnull().sum() / titanic.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "db701fc53e5e7e04587ec04fe374bafe",
     "grade": true,
     "grade_id": "cell-65b3a6e89c523d51",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Proportion of missing targets: 0.00\n",
      "Proportion of missing `Age` values: 0.20\n"
     ]
    }
   ],
   "source": [
    "# TEST\n",
    "print('Proportion of missing targets: {:.2f}'.format(prop_missing.Survived))\n",
    "print('Proportion of missing `Age` values: {:.2f}'.format(prop_missing.Age))\n",
    "\n",
    "prop_CORRECT = titanic.isnull().sum()/titanic.shape[0]\n",
    "assert prop_missing.shape[0] == prop_CORRECT.shape[0], 'Wrong number of values'\n",
    "assert np.allclose(prop_missing.Age, 177./891.), 'Wrong proportion for th ecolumn Age'\n",
    "assert sum(prop_missing == 0) == sum(prop_CORRECT == 0), 'Wrong number of coumns with 0 missing values'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "deletable": false,
    "editable": false,
    "id": "k8n8kW9Z9iDm",
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "47d8c17ace448924e0fc7d743e34280d",
     "grade": false,
     "grade_id": "cell-6f1656159b2630d5",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "We have two columns with missing values. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Age', 'Embarked'], dtype=object)"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic.columns[prop_missing > 0].values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "cd811f279ed8717721ca028b77f8fcc6",
     "grade": false,
     "grade_id": "cell-93223e6e1beacebc",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "<a class=\"anchor\" id=\"task11\"></a>\n",
    "What can we do with that? Below you can find some options:\n",
    "- Fill all the NAs with the same value (mean, median, any other constant)\n",
    "- Fill NAs using grouping (e.g. we can fill missing in the variable `Fare` for male and female passengers separately using their average value)\n",
    "- Drop all the rows with missing values\n",
    "- Drop the whole column (e.g. if there are too many missing values)\n",
    "\n",
    "The most popular way is to use `SimpleImputer` from sklearn. If fills all the missing values with the same number. \n",
    "\n",
    "\n",
    "**Task 11** [2 pts] In this task we will implement a more phisticated Imputer. `MeanGroupImputer`. We will make sure that it has proper sklearn interface, so that we can use it within our pipelines. Below you can find the skeleton code for the `MeanGroupImputer`. Please read it carefully to make sure you understand everythig. Your task is to write missing code for the method `transform`. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "550acd3a6517a6dc00df158f553680c5",
     "grade": false,
     "grade_id": "cell-5c83fb1c75d9bd6c",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.base import BaseEstimator, TransformerMixin\n",
    "class MeanGroupImputer(BaseEstimator, TransformerMixin):\n",
    "    '''\n",
    "    Class used for imputing missing values in a pd.DataFrame using mean value within group\n",
    "    \n",
    "    Parameters\n",
    "    ----------    \n",
    "    group_cols : str\n",
    "        A column used to calculate the mean values\n",
    "    Returns\n",
    "    -------\n",
    "    X : array-like\n",
    "        The array with imputed values in the target column\n",
    "    '''\n",
    "    def __init__(self, group_col):\n",
    "        assert type(group_col) == str, 'group_col should be a string'\n",
    "\n",
    "        self.group_col = group_col\n",
    "    \n",
    "    def fit(self, X, y=None):\n",
    "        assert X[self.group_col].isna().sum() == 0, 'There are missing values in the group_col'\n",
    "        \n",
    "        # Group dataset by `group_col` and calculate mean value of all the other columns within this group\n",
    "        self.mapping = X.groupby(self.group_col).mean()\n",
    "        return self \n",
    "    \n",
    "    def transform(self, X, y=None):\n",
    "        X = X.copy()\n",
    "        # make sure that the imputer was fitted\n",
    "        assert self.mapping is not None\n",
    "        \n",
    "        # loop over all the groups\n",
    "        for index, row in self.mapping.iterrows():\n",
    "            \n",
    "            # Fill in missing values for the group `index` with the values `row`            \n",
    "            # your code here\n",
    "            X.loc[X[self.group_col] == index] = X[X[self.group_col] == index].fillna(value=row)\n",
    "        \n",
    "        # Then drop grouping column (we did not transform it, so it is not needed anymore)\n",
    "        X.drop(self.group_col, axis=1, inplace=True)\n",
    "        return X.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "742b4eaa3622f0e800d0f8a3840a0dc9",
     "grade": true,
     "grade_id": "cell-da989463096f240f",
     "locked": true,
     "points": 2,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  name  value  other_value\n",
      "0    A    1.0         10.0\n",
      "1    A    NaN          NaN\n",
      "2    B    2.0          NaN\n",
      "3    B    NaN         20.0\n",
      "4    B    3.0         30.0\n",
      "5    B    1.0         10.0\n",
      "6    C    3.0         30.0\n",
      "7    C    NaN          NaN\n",
      "8    C    5.0         30.0\n",
      "[[ 1. 10.]\n",
      " [ 1. 10.]\n",
      " [ 2. 20.]\n",
      " [ 2. 20.]\n",
      " [ 3. 30.]\n",
      " [ 1. 10.]\n",
      " [ 3. 30.]\n",
      " [ 4. 30.]\n",
      " [ 5. 30.]]\n"
     ]
    }
   ],
   "source": [
    "toy_dataset = pd.DataFrame({'name': ['A','A', 'B','B','B','B', 'C','C','C'],\n",
    "                            'value': [1, np.nan, 2, np.nan, 3, 1, 3, np.nan, 5],\n",
    "                            'other_value': [10, np.nan, np.nan, 20, 30, 10, 30, np.nan, 30]})\n",
    "print(toy_dataset)\n",
    "imp = MeanGroupImputer(group_col='name')\n",
    "output = imp.fit_transform(toy_dataset)\n",
    "print(output)\n",
    "\n",
    "# test that answers are correct for the toy dataset\n",
    "assert (output[:, 0] == np.array([1.0, 1.0, 2.0, 2.0, 3.0, 1.0, 3.0, 4.0, 5.0])).all()\n",
    "assert (output[:, 1] == np.array([10.0, 10.0, 20.0, 20.0, 30.0, 10.0, 30.0, 30.0, 30.0])).all()\n",
    "\n",
    "correct_out = titanic['Age'].fillna(titanic.groupby('Title')['Age'].transform('mean'))\n",
    "imp = MeanGroupImputer(group_col='Title')\n",
    "titanic_copy = titanic.copy()\n",
    "given_out = imp.fit_transform(titanic[['Title', 'Age']])\n",
    "assert sum(given_out[:, 0] != correct_out) == 0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "7dc3d3e50cd755737ffcdc663fc2bbe3",
     "grade": false,
     "grade_id": "cell-dce865a64f265a1c",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## 1.4 Define column transformers <a class=\"anchor\" id=\"columns\"></a>\n",
    "\n",
    " <a class=\"anchor\" id=\"task12\"></a>\n",
    " **Task 12** [2 pts] In this task we will define columns transformer. Your task is to create three pipelines:\n",
    " - `age_pipe`: Pipeline to preprocess column `Age`. It uses `MeanGroupImputer` with the grouping variable `Title` to fill missing values in `Age` and then applies `StandardScaler`\n",
    " - `fare_pipe`: Pipeline to preprocess column `Fare`. It applies `StandardScaler` only\n",
    " - `categ_pipe`: Pipeline to preprocess all categorical variables. It uses `SimpleImputer` to impute missing values with the most frequent class and then applies `OneHotEncoder`\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "0f6bfb485b00188a3dd8179596704f4b",
     "grade": false,
     "grade_id": "cell-f79ada0c37790721",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.preprocessing import OneHotEncoder, StandardScaler\n",
    "from sklearn.pipeline import make_pipeline\n",
    "\n",
    "# your code here\n",
    "age_pipe = make_pipeline(\n",
    "    MeanGroupImputer('Title'),\n",
    "    StandardScaler(),\n",
    ")\n",
    "\n",
    "fare_pipe = make_pipeline(\n",
    "    StandardScaler(),\n",
    ")\n",
    "\n",
    "categ_pipe = make_pipeline(\n",
    "    SimpleImputer(missing_values=np.nan, strategy='most_frequent'),\n",
    "    OneHotEncoder(),\n",
    ")\n",
    "\n",
    "\n",
    "# Combine all three pipelines in one column transformer\n",
    "column_transformer = ColumnTransformer([\n",
    " ('age', age_pipe, ['Age', 'Title']),\n",
    " ('fare', fare_pipe, ['Fare']),\n",
    " ('all_categ', categ_pipe, categ_columns)],\n",
    "remainder='passthrough'\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "42f550bf4a79b79792617ee2be9cc31d",
     "grade": true,
     "grade_id": "cell-1927282b574aede2",
     "locked": true,
     "points": 2,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            0         1    2    3    4    5    6    7    8    9   10   11  \\\n",
      "0   -0.584387 -0.502445  0.0  1.0  0.0  0.0  1.0  0.0  0.0  0.0  1.0  0.0   \n",
      "1    0.621365  0.786845  1.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0   \n",
      "2   -0.282949 -0.488854  1.0  0.0  0.0  0.0  1.0  0.0  0.0  1.0  0.0  0.0   \n",
      "3    0.395286  0.420730  1.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  1.0   \n",
      "4    0.395286 -0.486337  0.0  1.0  0.0  0.0  1.0  0.0  0.0  0.0  1.0  0.0   \n",
      "..        ...       ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...   \n",
      "886 -0.207590 -0.386671  0.0  1.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0   \n",
      "887 -0.810466 -0.044381  1.0  0.0  0.0  0.0  1.0  0.0  0.0  1.0  0.0  0.0   \n",
      "888 -0.601421 -0.176263  1.0  0.0  0.0  0.0  1.0  0.0  0.0  1.0  0.0  0.0   \n",
      "889 -0.282949 -0.044381  0.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0   \n",
      "890  0.169208 -0.492378  0.0  1.0  0.0  1.0  0.0  0.0  0.0  0.0  1.0  0.0   \n",
      "\n",
      "      12   13   14   15   16   17  \n",
      "0    0.0  0.0  3.0  0.0  1.0  0.0  \n",
      "1    0.0  1.0  1.0  0.0  1.0  0.0  \n",
      "2    0.0  1.0  3.0  1.0  0.0  0.0  \n",
      "3    0.0  1.0  1.0  0.0  1.0  0.0  \n",
      "4    0.0  0.0  3.0  1.0  0.0  0.0  \n",
      "..   ...  ...  ...  ...  ...  ...  \n",
      "886  1.0  0.0  2.0  1.0  0.0  0.0  \n",
      "887  0.0  1.0  1.0  1.0  0.0  0.0  \n",
      "888  0.0  0.0  3.0  0.0  1.0  0.0  \n",
      "889  0.0  1.0  1.0  1.0  0.0  0.0  \n",
      "890  0.0  0.0  3.0  1.0  0.0  0.0  \n",
      "\n",
      "[891 rows x 18 columns]\n"
     ]
    }
   ],
   "source": [
    "test_titanic = column_transformer.fit_transform(titanic)\n",
    "print(pd.DataFrame(test_titanic))\n",
    "\n",
    "assert (pd.DataFrame(test_titanic).isna().sum().values == 0).all()\n",
    "assert test_titanic.shape[1] == 18, 'Wrong number of columns'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "a93e375f0a53ff73f96f3559ce7fea7f",
     "grade": false,
     "grade_id": "cell-78fe5935f758ff1e",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## 1.5 Train/test split <a class=\"anchor\" id=\"train_test\"></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "78ee290189bbf6fd4435796185f87353",
     "grade": false,
     "grade_id": "cell-d50c1c521723f6e9",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "tr, te = train_test_split(titanic, test_size=0.2, random_state=42)\n",
    "\n",
    "y_train = tr.Survived\n",
    "y_test = te.Survived\n",
    "X_train = tr.drop(['Survived'], axis=1)\n",
    "X_test = te.drop(['Survived'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "9777bb200370b3e7acdfdf9535bf3b95",
     "grade": false,
     "grade_id": "cell-0a85e95d85f3491e",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "# 2. Logistic Regression and Support Vector Machine <a class=\"anchor\" id=\"part2\"></a>\n",
    "\n",
    "\n",
    "## 2.1 Fit Logistic Regression\n",
    "\n",
    " <a class=\"anchor\" id=\"task13\"></a>\n",
    "**Task 13** [1 pt] Define the `log_reg_pipe` - pipeline which applies `column_transformer` and fits logistic regression with the the hyperparameter `penalty='none'` (by default sklearn applies L2 regularization). Calculate the 5-fold cross-validation score (use `accuracy` as a scoring function). Save the result (average accuracy on cross-validation) in the variable `log_reg_score`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "8e22b0039452140c47c23dc1b5bb14ec",
     "grade": false,
     "grade_id": "cell-8bb06ad3b7e9aa39",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "# your code here\n",
    "log_reg_pipe = Pipeline([\n",
    "    ('column_transformer', column_transformer),\n",
    "    ('estimator', LogisticRegression(penalty='none'))\n",
    "])\n",
    "\n",
    "sc = cross_val_score(log_reg_pipe, X_train, y_train, cv=5, scoring='accuracy')\n",
    "log_reg_score = np.mean(sc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "9e42b3fc56aa1887d6d4a576ce0d5d6f",
     "grade": true,
     "grade_id": "cell-d6e870a4329947b6",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8243967300305328\n"
     ]
    }
   ],
   "source": [
    "print(log_reg_score)\n",
    "\n",
    "assert np.allclose(log_reg_score, 0.824, rtol=1e-3)\n",
    "assert isinstance(log_reg_pipe.steps[0][1], ColumnTransformer)\n",
    "assert isinstance(log_reg_pipe.steps[1][1], LogisticRegression)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "d7b75739a8ab45a4ce506e58c2c3a097",
     "grade": false,
     "grade_id": "cell-6a5de7b77d2d21f5",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## 2.2 Fit Support Vector Machine\n",
    "\n",
    " <a class=\"anchor\" id=\"task14\"></a>\n",
    "**Task 14** [1 pt] Define the `svm_pipe` - pipeline which applies `column_transformer` and fits Support Vector Machine model (it is imported for you below) using the hyperparameter `kernel='linear'`. Calculate the 5-fold cross-validation score (use `accuracy` as a scoring function). Save the result (average accuracy on cross-validation) in the variable `svm_score`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "c73bedb8efa0db4658719cb9b54f658f",
     "grade": false,
     "grade_id": "cell-e49424107e9226cb",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.svm import SVC\n",
    "\n",
    "# your code here\n",
    "svm_pipe = Pipeline([\n",
    "    ('column_transformer', column_transformer),\n",
    "    ('estimator', SVC(kernel='linear'))\n",
    "])\n",
    "\n",
    "svm_score = np.mean(cross_val_score(svm_pipe, X_train, y_train, cv=5, scoring='accuracy'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "b7a96a450e0a60e0752a51ad8dc737c9",
     "grade": true,
     "grade_id": "cell-86e3112caf998f12",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8300108342361863\n"
     ]
    }
   ],
   "source": [
    "print(svm_score)\n",
    "\n",
    "assert np.allclose(svm_score, 0.83, rtol=1e-3)\n",
    "assert isinstance(svm_pipe.steps[0][1], ColumnTransformer)\n",
    "assert isinstance(svm_pipe.steps[1][1], SVC)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "3bc68c7faf75fae7173a6be90802235f",
     "grade": false,
     "grade_id": "cell-e77c243f4e58c126",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## 2.3 Compare different models\n",
    "\n",
    " <a class=\"anchor\" id=\"task15\"></a>\n",
    "**Task 15** [2 pts] In this task you are supposed to use grid search to find the best classifier for the given dataset. Use `GridSearchCV` class from sklearn. Use 5-Fold cross validation with accuracy as a scoring metric.\n",
    "\n",
    "*Hints*. Read documentation to see, which hyperparameters `LogisticRegression` and `SVC` have. Pay attention to `kernel` in the SVM model and the regularization coefficient `C` for both LogisticRegression and SVC, try different penalties for `LogisticRegression`. Explore other hyperparameters as well. Your task is to simply get the best accuracy posibe. The minimum passing value will be 0.84 (average score on cross-validaition)\n",
    "\n",
    "Please, do not use models other that `SVC` or `LogisticRegression`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "PQ0rvWbqz3qj",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "d88e4c27e6eb79a902de2c3623cd554e",
     "grade": false,
     "grade_id": "cell-ddf2a2bf617ee294",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "# your code here\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "8884d341c4f5d20998f063471f227d05",
     "grade": true,
     "grade_id": "cell-056b0f3a1fda6d1a",
     "locked": true,
     "points": 2,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "print(grid_pipe.best_score_)\n",
    "print(grid_pipe.best_estimator_.steps[1][1])\n",
    "\n",
    "assert grid_pipe.best_score_ > 0.84\n",
    "assert isinstance(grid_pipe.best_estimator_.steps[1][1], SVC) or isinstance(grid_pipe.best_estimator_.steps[1][1], LogisticRegression)\n",
    "test_score = np.mean(cross_val_score(grid_pipe.best_estimator_, X_train, y_train, cv=5, scoring='accuracy'))\n",
    "assert np.allclose(test_score, grid_pipe.best_score_, rtol=1e-3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "69fbf039e609592675c2bbac1c39551e",
     "grade": false,
     "grade_id": "cell-256ce340a7414671",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## 2.4 Eval best model on test\n",
    "\n",
    "Now, we can use the best estimator to evaluate model on the test dataset. \n",
    "\n",
    "1. Fit model on the whole test data\n",
    "2. Make predictions on the test set\n",
    "3. Calculate accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "grid_pipe.best_estimator_.fit(X_train, y_train)\n",
    "y_pred = grid_pipe.best_estimator_.predict(X_test)\n",
    "accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "8601c0db1a92141fccfc5eac75767689",
     "grade": false,
     "grade_id": "cell-f49a2cc882e90504",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "# Optional Part\n",
    "\n",
    "This homework is based on an extremely popular [Kaggle competition](https://www.kaggle.com/c/titanic/overview). We encourage you to use the result of this homework to get aquanted with this platform. Below, we provide a short instruction along with the list of useful link for those of you who are interested to learn more about it. \n",
    "\n",
    "1. Train the best model you can. Here you can use al the training data to perform cross-validation, because there is a separate `test set` provided by the competioint (We did not use it in the assignment, because there is not correct answers provided for this test dataset)\n",
    "2. Load the test dataset: `pd.read_csv(\"titanic_kaggle_test.csv\")`. We've saved this file for you on courserra labs already\n",
    "3. Do not forget to perform the same transformations you did with the train data (e.g. create new variables, deleting others, etc.)\n",
    "4. Make predictions for this dataset and save them as a csv file. You can find example of the submission file [here](https://www.kaggle.com/c/titanic/data)\n",
    "5. Submit your predictions on Kaggle (do not forget to register beforehand). After some time you will see your score! Do not worry if you are not on the first place of the [Leaderboard](https://www.kaggle.com/c/titanic/leaderboard). Consider solutions of other Data Scientists in the [Notebooks](https://www.kaggle.com/c/titanic/notebooks) section.\n",
    "\n",
    "```Good Luck!```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "authorship_tag": "ABX9TyMLuDZqhJ6FOtzPDD92rePH",
   "collapsed_sections": [],
   "name": "Week 17. EDA and feature engineering.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
